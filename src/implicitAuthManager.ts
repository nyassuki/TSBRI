/**
 * BRIAPI_collection copyLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { OAuthToken } from './models/oAuthToken';
import { ClientInterface } from "./clientInterface";
import { OAuthAuthorizationController } from './controllers/oAuthAuthorizationController';

export class ImplicitAuthManager {
  private _oAuthClientId: string;
  private _oAuthRedirectUri: string;

  private _baseUri: string;

  constructor({
    oAuthClientId,
    oAuthRedirectUri,
  }:{
    oAuthClientId: string,
    oAuthRedirectUri: string,
  },
    baseUri: string,
    client: ClientInterface
  ) {
    this._oAuthClientId = oAuthClientId;
    this._oAuthRedirectUri = oAuthRedirectUri;

    this._baseUri = baseUri;
  }

  public buildAuthorizationUrl(
    state: string,
    additionalParams?: Record<string, string>
  ): string {
    let query = this._baseUri + '/auth';
    let queryParams: Record<string, string | undefined> = {
      response_type: 'code',
      client_id: this._oAuthClientId,
      redirect_uri: this._oAuthRedirectUri,
      state: state,
      ...additionalParams,
    };
    let queryString: string[] = [];
    for (const key of Object.keys(queryParams)) {
      const value = queryParams[key];
      if (value !== undefined && value !== null) {
        queryString.push(
          `${encodeURIComponent(key)}=${encodeURIComponent(value)}`
        );
      }
    }
    return (query +=
      (query.indexOf('?') === -1 ? '?' : '&') + queryString.join('&'));
  }
}
