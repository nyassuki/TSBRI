/**
 * BRIAPI_collection copyLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Success, successSchema } from '../models/success';
import { string } from '../schema';
import { BaseController } from './baseController';

export class MiscController extends BaseController {
  /**
   * First endpoint to hit before making request to other endpoint in BRIAPI
   *
   * @param grantType
   * @param clientId
   * @param clientSecret
   * @return Response from the API call
   */
  async getToken(
    grantType: string,
    clientId: string,
    clientSecret: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Success>> {
    const req = this.createRequest('POST', '/accesstoken');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      grantType: [grantType, string()],
      clientId: [clientId, string()],
      clientSecret: [clientSecret, string()],
    });
    req.header('Content-Type', 'application/x-www-form-urlencoded');
    req.query('grant_type', mapped.grantType);
    req.form({
      client_id: mapped.clientId,
      client_secret: mapped.clientSecret,
    });
    return req.callAsJson(successSchema, requestOptions);
  }

  /**
   * API endpoint to get account information and balance
   *
   * @param bRISignature
   * @param bRITimestamp
   * @return Response from the API call
   */
  async accountInformation(
    bRISignature: string,
    bRITimestamp: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/888801000157508');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      bRISignature: [bRISignature, string()],
      bRITimestamp: [bRITimestamp, string()],
    });
    req.header('BRI-Signature', mapped.bRISignature);
    req.header('BRI-Timestamp', mapped.bRITimestamp);
    return req.call(requestOptions);
  }
}
